name: Build Tex for Manim
on:
  push:
  release:
    types: [created]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8       
      - name: Download Texlive for Windows
        if: runner.os == 'Windows'
        run: |
          ./windows.ps1
          7z a ManimTex.zip "$($PWD)\ManimTex"
      - name: Download Texlive for Linux
        if: runner.os != 'Windows'
        run: |
          sh linux.sh
          export PATH="$HOME/bin:$PATH"
          echo "::set-env name=PATH::${PATH}"

      - name: Pack Tex Mac
        if: runner.os == 'macos'
        run: |
          tar zcf ManimTex.tar.gz -C ~/Library ManimTex
      - name: Pack Tex Linux
        if: runner.os == 'linux'
        run: |
          tar zcf ManimTex.tar.gz -C ~ ManimTex
      - name: Install Manim And Test on Windows
        if: runner.os == 'Windows'
        run: |
          Get-ChildItem "$PWD\ManimTex" | Measure-Object -Property Length -sum
          choco install --no-progress manim
          $env:Path += ";" + "$($PWD)\ManimTex\bin\win32"
          Start-Process -ArgumentList "path add" -FilePath "$($PWD)\ManimTex\bin\win32\tlmgr.bat" -NoNewWindow -Wait
          curl -L https://pastebin.com/raw/QcbYFiTz -o tex.py
          manim tex.py
      - name: Install Manim and Test Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y ffmpeg
          pip install https://github.com/ManimCommunity/manim/archive/master.zip
          curl -L https://pastebin.com/raw/QcbYFiTz -o tex.py
          manim tex.py
      - name: Install Manim and Test MacOS
        if: runner.os == 'macOS'
        run: |
          brew install openssl readline ffmpeg sox pyenv pyenv-virtualenv
          pip install https://github.com/ManimCommunity/manim/archive/master.zip
          curl -L https://pastebin.com/raw/QcbYFiTz -o tex.py
          manim tex.py

      - uses: actions/upload-artifact@v2
        if: runner.os == 'Windows'
        with:
         name: ManimTex-${{ runner.os }}.zip
         path: ManimTex.zip
      - uses: actions/upload-artifact@v2
        if: runner.os != 'Windows'
        with:
         name: ManimTex-${{ runner.os }}.tar.gz
         path: ManimTex.tar.gz
      - uses: actions/upload-artifact@v2
        with:
         name: manimtest
         path: media
      - name: Create Release
        id: create_release
        shell: bash
        env:
          access_token: ${{ secrets.GITHUB_TOKEN }}
          tag_act: ${{ github.ref }}
        run: |
          ref_tag=$(python -c "print('${tag_act}'.split('/')[-1])")
          res=$(curl -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${access_token}" https://api.github.com/repos/naveen521kk/manim-tex/releases/tags/${ref_tag})
          echo "${res}"
          upload_url=$(python -c "import json;print(json.loads('''${res}''')['upload_url'])")
          echo "::set-output name=upload_url::${upload_url}"
      - name: Upload Release Asset
        id: upload-release-asset-non-windows
        uses: actions/upload-release-asset@v1
        if: runner.os != 'Windows'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ManimTex.tar.gz
          asset_name: ManimTex-${{ runner.os }}.tar.gz
          asset_content_type: application/gzip
      - name: Upload Release Asset
        id: upload-release-asset-windows
        uses: actions/upload-release-asset@v1
        if: runner.os == 'Windows'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ManimTex.zip
          asset_name: ManimTex-${{ runner.os }}.zip
          asset_content_type: application/zip
